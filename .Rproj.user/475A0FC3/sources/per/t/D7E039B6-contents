---
  title: "SoilCN"
author: "ZM,VS,KO"
date: "10/13/2022"
output: html_document
---
  
  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## We want to recreate a model from: (Porporato et al., 2003; D’Odorico et al., 2003)
#Citation: 1. Porporato, A., D’Odorico, P., Laio, F., & Rodriguez-Iturbe, I. (2003). Hydrologic controls on soil carbon and nitrogen cycles. I. Modeling scheme. Advances in Water Resources, 26(1), 45–58. https://doi.org/10.1016/S0309-1708(02)00094-5 2.D’Odorico, P., Laio, F., Porporato, A., & Rodriguez-Iturbe, I. (2003). Hydrologic controls on soil carbon and nitrogen cycles. II. A case study. Advances in Water Resources, 26(1), 59–70. https://doi.org/10.1016/S0309-1708(02)00095-7


## Basic model
```{r}
rm(list=ls())
require(deSolve)
#----- The differential equations -----
sir <- function(t, x, p) {
  with(as.list(c(x,p)),{
    
    dCl <- ADD + BD - DECl # Carbon litter pool (eq 4)
    dCh <- rh*DECl - DECh #Humus pool C (eq 8)
    dCb <- (1-rh-rr)*DECl + (1-rr)*DECh - BD/10 # Microbial biomass pool (eq 11)
    dNl <- ADD/CNadd + BD/CNbio - DECl/CNl # C Nitrogen litter pool (eq 7)
    dNh <- rh*(DECl/CNh) - (DECh/CNh) # Humus pool N (eq 10)
    dNb <- (1-rh*CNl/CNh)*DECl/CNl + DECh/CNh - BD/CNbio - phi # N Microbial biomass pool (eq 12)
    dNplus <- MIN - IMMplus - NIT - LEplus - UPplus # eq 24 CHECK
    dNminus <- NIT - IMMminus - LEminus - UPminus # eq 25 CHECK
    #Ctot <- dCl+dCh+dCb
    #Ntot <- dNl+dNh+dNb+dNplus+dNminus
    
    list(c(dCl, dCh, dCb, dNl, dNh, dNb, dNplus, dNminus
           #, Ctot, Ntot
           ))
  })
}

# Initial conditions 
Cl_0 <- 960   #carbon concentration  litter pool (960 - 1400)
Ch_0 <- 8500  #carbon concentration humus pool;
Cb_0 <- 48 #12.5 #carbon concentration biomass pool;
Nl_0 <- #organic nitrogen concentration  litter pool;
Nh_0 <- #organic nitrogen concentration humus pool;
Nb_0 <- #organic nitrogen concentration biomass pool;
Nplus_0 <-0.01 #0.01  #ammonium concentration soil;
Nminus_0 <-1.25 #nitrate concentration soil

#Parameters
## Soil parameters
n <- 0.4 ### Porosity n 0.4
sfc <- 0.3 ###Field capacity sfc 0.3
sh <- 0.02 ### Hygroscopic point sh 0.02
ks <- 1.1### Sat. hydr. conductivity Ks (m d1) 1.1
Zr <- 0.80 ### Soil depth Zr (m) 0.80

## Rainfall parameters
landa<- 0.23###Average storm frequency k (d1) 0.23
alpha <- 11 ###Average storm depth a (mm) 11

## Vegetation parameters
Emax <- 4.5 ###Max. evapotranspiration Emax (mm d1) 4.5
ADD <- 1.5 ###Added litter (avg. rate) Add (gC m2 d1) 1.5 #rate at which carbon is added to soil and made available to microbial colonies

## Soil-veg. parameters
ss <- 0.17 ###Point of incipient stress s 0.17
sw <- 0.065 ###Permanent wilting point sw 0.065

##C/N ratios
CNadd <- 58 ### Added litter ðC=NÞadd 58
CNbio <- 11.5 ###Microbial biomass ðC=NÞbio 11.5 ## C/Nb = 8
CNh <- 22 ###Humus ðC=NÞh 22 #C/Nh = 10
  
# Parameters calibration

aplus <- 0.05
aminus <- 1
DEMplus <- 0.2
DEMminus <- 0.5
dd <- 3
F <- 0.1
kd <- 0.0085
kl <- 0.000065
kiplus <- 1
kiminus <-  1
kh <- 0.0000025
kn <-  0.6
rh <- 0.2
rr <- 0.6
  
## Parameters 2
BD =  kd*CNbio #rate which carbon returns to litter pool due to dead microbe
phi = 0.67 #nondimentional factor accounting for reduction of decomp rate when poor nitrogen levels insufficiant to integrate in bacteria
s = 0.11 #average soil moisture
fds = if(s<=sfc){s/sfc
} else if(s>sfc){sfc/s}
Cl=960
Ch=8500
DECl = (phi*fds*kl*CNbio)*Cl #carbon output due to microbial decomp
DECh = (phi*fds*kh*CNbio)*Ch #
rr = 0.6
rh = 0.2 # 0.15-0.35
IMMplus = 0.67
IMMminus = 1 - IMMplus #Max 1, 0.67 and 0
#(C/N)h = 10
#(C/N)b = 8
CNl = 40
MIN = 1 #0
fns = if(s<=sfc){s/sfc
} else if(s>sfc){(1-s)/(1-sfc)}
NIT = fns*kn*CNbio*Nplus_0
b=0.25 #?
beta=2*b+4
Ls=(ks/(exp((beta)*(1-sfc))-1)*(exp((beta)*(s-sfc))-1))
LEplus = aplus*(Ls/s*n*Zr) #Ls leakage term
LEminus = aminus*(Ls/s*n*Zr) 
Tmax= 4.5
#Ts = ((s-sw)/(ss-sw))*Tmax #if(0<=s&&s<=sw){print(0)} else if(sw<s&&s<=ss){print(((s-sw)/(ss-sw))*Tmax)} else(ss<s&&s<=1){print(Tmax)}
Ts=if(0<=s&&s<=sw){0
} else if(sw<s&&s<=ss){(s-sw)/(ss-sw)*Tmax
} else if(ss<s&&s<=1){Tmax}
UPpplus=aplus*(Ts/s*n*Zr)*Nplus_0
UPpminus=aminus*(Ts/s*n*Zr)*Nminus_0
d=3
kuplus=(aplus/s*n*Zr)*F*s^d
kuminus=(aminus/s*n*Zr)*F*s^d
#UPaplus= kuplus*Nplus_0 #if(DEMplus-UPpplus<0){0
    #} else if(kuplus*Nplus_0<DEMplus-UPpplus){kuplus*Nplus_0
    #} else(kuplus*Nplus_0>DEMplus-UPpplus>0){DEMplus-UPpplus}
UPaplus= if(DEMplus-UPpplus<0){0
} else if(kuplus*Nplus_0<DEMplus-UPpplus){kuplus*Nplus_0
} else if(kuplus*Nplus_0>DEMplus-UPpplus&&DEMplus-UPpplus>0){DEMplus-UPpplus}
#UPaminus= 0 #if(DEMminus-UPpminus<0){0
    #} else if(kuminus*Nminus_0<DEMminus-UPpminus){kuminus*Nminus_0
    #} else(kuminus*Nmius_0>DEMminus-UPpminus>0){DEMminus-UPpminus}
UPaminus = if(DEMminus-UPpminus<0){0
} else if(kuminus*Nminus_0<DEMminus-UPpminus){kuminus*Nminus_0
} else if(kuminus*Nmius_0>DEMminus-UPpminus&&DEMminus-UPpminus>0){DEMminus-UPpminus}
UPplus = aplus*(Ts/s*n*Zr)*Nplus_0
UPminus = aminus*(Ts/s*n*Zr)*Nminus_0


times <- seq(0, 250.0, 1) # Time sequence
parms <- c(ADD=ADD, 
           alpha=alpha,
           aminus=aminus,
           aplus=aplus,
           b=b,
           BD=BD,
           beta=beta,
           #Cb_0=Cb_0,
           Ch=Ch,
           #Ch_0=Ch_0,
           Cl=Cl,
           #Cl_0=Cl_0,
           CNadd=CNadd,
           CNbio=CNbio,
           CNh=CNh,
           d=d,
           dd=dd,
           DECh=DECh,
           DECl=DECl,
           DEMminus=DEMminus,
           DEMplus=DEMplus,
           Emax=Emax,
           F=F,
           fds=fds,
           IMMplus=IMMplus,
           IMMminus=IMMminus,
           kd=kd,
           kh=kh,
           kiminus=kiminus,
           kiplus=kiplus,
           kl=kl,
           kn=kn,
           ks=ks,
           kuminus=kuminus,
           kuplus=kuplus,
           landa=landa,
           LEminus=LEminus,
           LEplus=LEplus,
           Ls=Ls,
           MIN=MIN,
           n=n,
           NIT=NIT,
           phi=phi,
           rh=rh,
           rr=rr,
           s=s,
           sfc=sfc,
           sh=sh,
           ss=ss,
           sw=sw,
           Zr=Zr)
xstart <- c(Cl=Cl_0, Ch=Ch_0, Cb=Cb_0, Nl=Nl_0, Nh=Nh_0, Nb=Nb_0, Nplus=Nplus_0, Nminus=Nminus_0) # Initial conditions
my.atol <- c(1e-16,1e-16,1e-16,1e-16,1e-16,1e-16,1e-16,1e-16); # Abs. accuracy - remember to add a term for each equation
my.rtol <- 1e-12 # Rel. accuracy
out <- as.data.frame(lsoda(xstart, times,
                           sir, parms, my.rtol, my.atol)) # Solve the eqns.
```

```{r}
#----- Plot the output -------
plot(out$time, out$Cl, col="black", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Ch, col="blue", type="l", lwd=5,
     ylim=c(0,8500), xlim = c(0,250),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Cb, col="red", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Nl, col="black", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Nh, col="blue", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Nb, col="red", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Nplus, col="orange", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)

plot(out$time, out$Nminus, col="yellow", type="l", lwd=5,
     #ylim=c(0,8000), xlim = c(0,5000),
     xlab="Time", ylab="Number")
#lines(out$time, out$Ch, col="red", lwd=5)
#lines(out$time, out$Cb, col="blue", lwd=5)
grid(NULL, NULL, lty=1,lwd=1)


```

